// Copyright (c) 2011-2014 The Bitcoin Core developers
// Distributed under the MIT/X11 software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.
#include <stdlib.h>
#include <time.h>
#include "main.h"
#include "miner.h"
#include "uint256.h"
#include "util.h"
#include <boost/foreach.hpp>
#include <boost/test/unit_test.hpp>
#include "VmScript/VmScriptRun.h"
#include "VmScript/CVir8051.h"
#include "VmScript/TestMcu.h"
#include "json/json_spirit_writer_template.h"
#include "rpcclient.h"
using namespace std;
using namespace boost;
using namespace json_spirit;

extern Object CallRPC(const string& strMethod, const Array& params);
extern int TestCallRPC(std::string strMethod, const std::vector<std::string> &vParams, std::string &strRet);
extern void GetAccountInfo(char *address);
extern void GenerateMiner();
	//
//	string strPrint;
//	int nRet;
//	Array params = RPCConvertValues(strMethod, vParams);
//
//	Object reply = CallRPC(strMethod, params);
//
//	// Parse reply
//	const Value& result = find_value(reply, "result");
//	const Value& error = find_value(reply, "error");
//
//	if (error.type() != null_type) {
//		// Error
//		strPrint = "error: " + write_string(error, false);
//		int code = find_value(error.get_obj(), "code").get_int();
//		nRet = abs(code);
//	} else {
//		// Result
//		if (result.type() == null_type)
//			strPrint = "";
//		else if (result.type() == str_type)
//			strPrint = result.get_str();
//		else
//			strPrint = write_string(result, true);
//	}
//	strRet = strPrint;
//	BOOST_MESSAGE(strPrint);
//	//cout << strPrint << endl;
//	return nRet;
//}
//static void GetAccountInfo(char *address) {
//	int argc = 3;
//	char *argv[3] = { "rpctest", "getaccountinfo", address };
//	CommandLineRPC(argc, argv);
//
//}
//static void GenerateMiner() {
//	int argc = 3;
//	char *argv[3] = { "rpctest", "setgenerate", "true" };
//	CommandLineRPC(argc, argv);
//}


std::string TxHash("");

void GetAccountState1() {
	GetAccountInfo("5zQPcC1YpFMtwxiH787pSXanUECoGsxUq3KZieJxVG");
}
void CreateRegScriptTx1() {
	cout <<"CreateRegScriptTx1" << endl;
	int argc = 6;
	char *argv[6] =
			{ "rpctest", "registerscripttx", "5zQPcC1YpFMtwxiH787pSXanUECoGsxUq3KZieJxVG",
					"fdd00d0200530000000000222200000000000000002222020d8ce4900f76784779018002f0a3d8fcd9fa7a007b0f900062787779018015e493a3ad82ae838a828b83f0a3aa82ab838d828e83d8e9d9e71207e6120dcc75d0007581bf75100075110f02001743757272656e742074697020686173683a004765745478696e666f3a00357a51506343315970464d7477786948373837705358616e5545436f4773785571334b5a69654a785647004765744163636f756e745075626c69636b65793a0051756572794163636f756e7442616c616e63653a0001000000e0faa3e0fba3e0fca3e0fd22cac0e0e6f0a308dafad0e0fa22cac0e0e0a3c582ccc582c583cdc583f0a3c582ccc582c583cdc583dae6d0e0ca22b90010bb0008e88af084f8aaf022e4fbc8fa22eb70227b10c833c8c933c9335007c39ac3dbf280069a50012adbeac833f4c8c933f4c9fa2275f008e4c833c8c933c933c99ac99b5004c92ac93bd5f0ecfbc833f4c8e4c9fa22251010af08f510400c15118008f51040021511d2af2200c0d0251010af08f510500c05118008f51050020511d2afd0d0222510f58210af08f510400c15118008f51040021511d2af851183222510f582e43511f583222510f8e43511f9222510fae43511fb222510fce43511fd222510c582c0e0e51134ffc583c0e0e510c3958224f910af088583118582108008858311858210d2afcef0a3e520f0a37808e608f0a3defaeff0a3e58124fbf8e608f0a3e608f0a30808e608f0a3e608f0a315811581d0e0fed0e0f815811581e8c0e0eec0e022851183851082e0a3fee0a3f5207808e0a3f608dffae0a3ffe0a3c0e0e0a3c0e0e0a3c0e0e0a3c0e010af088582108583118008858210858311d2afd083d0822274028000c0e0f40412019cd0e01200e42274028000ccc0e0edc0e0e510c39cccad1150011d10af068c108d1180068c108d11d2af1200f1d0e0fdd0e0fc2274f81201d9e990fbfef01200087f0102023fc082c083ea90fbfef0eba3f01200120203c6ea2cf8eb3df9c3e89ae99b4007c3e89ce99d5004d2f08002c2f0a2f02274f51201d974fc12016b851082851183ecf0a3edf08a088b0990f7fe12060d851082851183e02ef8a3e03ff9e82402f850010974021201b7e8f0a3e9f0851082851183e02402fca3e03400fdeefaeffb1202e140127c027d008510828511831203db1202e1500579001202bd750a02750b00780a12027f74041201d17afe7bf7120cea740212018174fe2efe74f73fff780a12027f74021201d1ee2402fae43ffb120cea7402120181851082851183120290ac08ad09ee2404fae43ffb120cea74021201810203cbd083d0822274041201817f0402023fe0fca3e0fd22e0faa3e0fb2274f51201d9eafeebff8c088d09750a00750b02780a12027f7c007d007afe7bf7120d627402120181ee4f700a7c017d007a007b00800feefaeffb120db0eafcebfdeefaeffb1202fe740b1201b71203d5aa08ab091202fe7a097b001202cf0203d074f71201d974fc12016beafeebff750800750902780812027f7c007d007afe7bf7120d627402120181eefaeffb120db012052e1202fe7a0b7b001202cf90f7fee064047002a3e0600a7a007b007c007d00802012053d12027f7c007df874021201c9120cea74021201818510828511831200d802071974f71201d974fc12016beafeebff750800750902780812027f7c007d007afe7bf7120d627402120181eefaeffb120db012052e1202fe7a0c7b001202cf90f7fee064047002a3e0600a7a007b007c007d00802012053d12027f7c007df874021201c9120cea74021201818510828511831200d80207198b09ea2401fce43509fdeefaeffb22851082851183e4f0a3f0a3f0a3f0750804f50978082274f51201d9eafeebff8c088d09750a00750b02780a12027f7c007d007afe7bf7120d627402120181eefaeffb120db012069c1202fe7a0a7b001202cf1206abc3e50898e50999404b90f7fe1202907c007df8740d1201b71203db120cea740212018190f7fee02400f8a3e034f8f9e8fce9fd8c828d8312060deef8eff97a147b001201128b09ea45097008ee9415ef94004003c380218e088f09780812027fec2402fc50010d740f1201b71203db120cea7402120181d30203d0e0fea3e0ff2274f51201d9eafeebff8c088d09750a00750b02780a12027f7c007d007afe7bf7120d627402120181eefaeffb120db012069c1202fe7a0d7b001202cf740b1201b7c082c0831206abd083d082c3e098a3e099401890f7fee064417002a3e0600f90f7fee064217002a3e06003c3801790f7fe1202907c007df8aa08ab09120cea7402120181d30203d08b0bea2401fce4350bfdeefaeffb2290f7fee0f8a3e0f92274f51201d9eafeebff8c088d09750a00750b02780a12027f7c007d007afe7bf7120d627402120181eefaeffb120db012069c1202fe7a0e7b001202cf90f7fee064087002a3e06003c3801790f7fe1202907c007df8aa08ab09120cea7402120181d30203d074041201817f0202023f74f71201d974fc12016b12078e12027f7c007d007afe7bf7120d6274021201817c047d00aa10ab111202fe7a117b001202cf740f1201b7c082c0831206abd083d082c3e098a3e0995003c3801b90f7fe1202907c007df8740f1201b71203db120cea7402120181d3020719851082851183eaf0a3ebf0a3ecf0a3edf075080075090278082274f71201d98a088b09ecfeedff7a1a7b001202cf1206abc3ee98ef995003c3801790f7fe1202907c007df8aa08ab09120cea7402120181d302071e020a0174b412016b900f76742c1201d174201200f1900f96740c1201d174201200f17c20fd740c1201c91207a8750820750900780812027f742e1201c188088909780812027f900f721200d8120723740412018175081e750900780812027f7c007d0f7a007b001203e17402120181750820780812027f742e1201d17a007b001203e17402120181740c1201c91204428a0a8b0b740c1201c91204b88a0c8b0dae0caf0d1207e38a0e8b0f851082851183eaf0a3ebf0eefaeffb1207e38a0c8b0d74021201b7eaf0a3ebf08e088f09780812027f7c007d00aa0eab0f120d627402120181780a12027f7c007d00aa0cab0d120d627402120181ee2402f508e43ff509e50a2402fee4350bff8e0a8f0b780a12027f74021201b77404120294ac08ad0974121201c91205537406120181750a14750b00780a12027f7c127d0f7a007b001203e17402120181780812027fac0ead0f7a007b001203e174021201818e088f09780812027fac0cad0d7a007b001203e174021201817a417b001207e38a088b09ae08af09750841750900780812027feefceffd7a1d7b0f1206137402120181750814780812027f7c487d0f7a007b001203e17402120181750841780812027feefceffd7a007b001203e1740212018174041201d17a1d7b0f1206b4750814780812027f7c5d7d0f7a007b001203e17402120181750808780812027f74061201d17a007b001203e1740212018179011202bd7a007b00744c1201812274f41201d9ea2402fee43bffc3ea9eeb9f4003020b00c3ee9404ef9400500c7e047f008006120b9c120ba4900fb8e0faa3e0fbea4b702c7aba7b0f120b907003020aee88828983c3e09ea3e09f5053120b9c80e788828983c3e09ea3e09f5042120b9c120b9070ec900fb8e0f8a3e0f5838882e0f8a3e0f9e8fce9fd7aba7b0f8003120b9c8a828b83e0f8a3e0f9ec687002ed69605788828983c3e09ea3e09f40e0eaf8ebf9e849605588828983e0faa3e0fbea2402fce43bfd8a828b83e0f508a3e0f509e50824fcf50ae50934fff50bc3e50a9ee50b9f502b8c828d83e0fca3e0fd88828983ecf0a3ed805f120d278a088b09a808a909e8496003020a267a007b008078ea2ef50aeb3ff50b88828983e50af0a3e50bf08c828d83e0f50aa3e0f50b120b83a3a3e50af0a3e50bf0e508c39ef508e5099ff509120b83e508f0a3e509f08a828b83eef0a3eff088828983120b946014e82402f850010988828983e0fca3e0fdec4d700478007900900fb8e8f0a3e9f0ea2402fa50010b7f0502023f88828983e0fca3e0f5838c82228a828b83e0f8a3e0f9e84922e82402fae439fb2274f31201d9ea4b7003020cdbea24fefaeb34fffb8a828b83e0fea3e0ffc3ee9404ef94005003020cdb900fbae0fca3e0fdea2402f508e43bf509ec4d600beaf8ebf9c3e89ce99d5015850882850983ecf0a3edf0900fba020c80ac82ad83ec2402f50ae43df50b850a82f583e0f50ca3e0850c82f583e58245836009c3e58298e5839940d5120ce0ec28f8ed39f9c3ea98eb995003020cdbea687002eb6970118c828d83e02ef0a3e03ff0ecfaedfb8030850a82850b83120ce4e849600dea2efceb3ffdc3e89ce99d406c850882850983e8f0a3e9f0850a82850b83eaf0a3ebf0ea2402f8e43bf9e8fce9fd120ce0e84960448a828b83e0fea3e0ffea2efeeb3fffe86e7002e96f702d900fb8e4f0a3f088828983e0fea3e0ff8a828b83e02ef0a3e03ff088828983a3a3120ce48c828d83e8f0a3e9f07f0602023f8c828d83e0f8a3e0f92274f81201d9eaf8ebf974081201b7e0fea3e0801f8c828d83e088828983f0a3a882a9838c828d83a3ac82ad83ee24ff1eef34ffffee4f70dc7f0102023fc082c083900fb6e0f8a3e0f9e84960067a007b0080207abc7b0f900fb6eaf0a3ebf074bbc394bc7410940ff98a828b8374fff0a3e9f0d083d08222c082c083851082851183e0f8a3e0f9e84960128a828b83ecf0a3e824ff18e934fff94870f2d083d0822274f81201d974fe12016beafeebff851082851183eef0a3eff0aa10ab117901120dcf80eac082c0838a828b838001a3e070fce582c39afae5839bfbd083d082220200142200",
					"1000000", "2" };
	CommandLineRPC(argc, argv);
}
bool CreateTx()
{
	int argc = 8;
	std::vector<std::string> vInputParams;
	vInputParams.clear();
	vInputParams.push_back("010000000100");
	vInputParams.push_back(
			"[\"5yNhSL7746VV5qWHHDNLkSQ1RYeiheryk9uzQG6C5d\"]");
	vInputParams.push_back("0b434b430046003531303030303030300000000000000000000000");
	vInputParams.push_back("100000");
	vInputParams.push_back("10");
	std::string strReturn("");
	if (TestCallRPC("createcontracttx", vInputParams, strReturn) > 0) {
		vInputParams.clear();
		cout << "create secure tx succeed1:"<<strReturn<< endl;
		TxHash = strReturn;
	}
	return false;
}
void ListRegScript1() {
	//cout << "listRegScript" << endl;
	int argc = 2;
	char *argv[2] = { "rpctest", "listregscript" };
	CommandLineRPC(argc, argv);
}
BOOST_AUTO_TEST_SUITE(VM_fun)

BOOST_AUTO_TEST_CASE(Gloal_fun)
{
	//cout << "=====================init account info ========================" << endl;
	GetAccountState1();
	CreateRegScriptTx1();
	GenerateMiner();
	cout << "=====================create tx 1========================" << endl;
	ListRegScript1();
	CreateTx();
	GenerateMiner();
//	GetAccountState1();
}
BOOST_AUTO_TEST_SUITE_END()
